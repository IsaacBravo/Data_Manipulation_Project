---
title: "Data Manipulation"
author: "Isaac Bravo"
date: '`r format(Sys.Date())`'
format:
  html:
    toc-title: Contents
    toc: true
    toc-location: left
    smooth-scroll: true
editor: visual
---

# 1. Introduction {#sec-chap-introduction}

```{python}
#| echo: false
import warnings; warnings.filterwarnings('ignore')
```

**Summary.** This tutorial explains how the different techniques that a user can use for data manipulation, through the comparison between the Python and R ecosystems, with special emphasis on the different alternatives provided by the R language.

**Keywords.** Python, R, data manipulation.

**Objectives:**

-   Comparison between Python and/or R
-   Provide an overview in the main operations in data manipulation.

::: {.callout-note icon="true" collapse="true"}
## Packages used in this chapter

This section details the packages and libraries that should be used along this tutorial.

::: panel-tabset
## Python code

```{python install-libraries-py, warning=FALSE}
import pandas as pd
import numpy as np
```

## R Base code

```{r base, warning=FALSE}

```

## R dplyr code

```{r install-libraries-dplyr, message=FALSE}
library(dplyr)
```

## R data.table code

```{r install-libraries-data.table, message=FALSE}
library(data.table)
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## Create data

::: panel-tabset
## Python code

```{python create-data-py, warning=FALSE}
DP = pd.DataFrame({
    'V1': ([1, 2] * 5)[:9],
    'V2': list(range(1, 10)),
    'V3': [0.5, 1.0, 1.5] * 3,
    'V4': [chr(x) for x in range(ord('A'), ord('A') + 3)]*3
})

print(DP)
```

## R Base code

```{r create-data-base, warning=FALSE}
DB <- data.frame(
  V1 = rep(c(1L, 2L), 5)[-10],
  V2 = 1:9,
  V3 = rep(c(0.5, 1.0, 1.5), 3),
  V4 = rep(LETTERS[1:3], 3))

DB
```

## R dplyr code

```{r create-data-dplyr, warning=FALSE}
DF <- tibble(
  V1 = rep(c(1L, 2L), 5)[-10],
  V2 = 1:9,
  V3 = rep(c(0.5, 1.0, 1.5), 3),
  V4 = rep(LETTERS[1:3], 3))

DF
```

## R data.table code

```{r create-data-data.table, warning=FALSE}
DT <- data.table(
  V1 = rep(c(1L, 2L), 5)[-10],
  V2 = 1:9,
  V3 = c(0.5, 1.0, 1.5),
  V4 = rep(LETTERS[1:3], 3))

DT
```
:::
:::

<hr>

# 2. Basic operations - Filters {#sec-chap-basic-operations-filters}

::: {.callout-note icon="false" collapse="true"}
## 2.1 Filter rows using indices

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-1-data-py, warning=FALSE}
DP.iloc[2:4, :]
```

## R Base code

```{r sec-chap-basic-operations-1-base, warning=FALSE}
DB[3:4,]
```

## R dplyr code

```{r sec-chap-basic-operations-1-dplyr, warning=FALSE}
slice(DF, 3:4)
```

## R data.table code

```{r sec-chap-basic-operations-1-data.table, warning=FALSE}
DT[3:4]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 2.2 Discard rows using negative indices

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-2-data-py, warning=FALSE}
DP.drop(DP.index[2:7])
```

## R Base code

```{r sec-chap-basic-operations-2-base, warning=FALSE}
DB[-(3:7),]
```

## R dplyr code

```{r sec-chap-basic-operations-2-dplyr, warning=FALSE}
slice(DF, -(3:7))
```

## R data.table code

```{r sec-chap-basic-operations-2-data.table, warning=FALSE}
DT[!3:7,]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 2.3 Filter rows using a logical expression

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-3-data-py, warning=FALSE}
DP[DP['V2'] > 5]

DP[DP['V4'].isin(["A", "C"])]
```

## R Base code

```{r sec-chap-basic-operations-3-base, warning=FALSE}
DB[DB$V2 > 5,]

subset(DB, V2 > 5) # 2nd option

DB[DB$V4 %in% c("A", "C"),]
```

## R dplyr code

```{r sec-chap-basic-operations-3-dplyr, warning=FALSE}
filter(DF, V2 > 5)

filter(DF, V4 %in% c("A", "C"))
```

## R data.table code

```{r sec-chap-basic-operations-3-data.table, warning=FALSE}
DT[V2 > 5]

DT[V4 %chin% c("A", "C")] # fast %in% for character
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 2.4 Filter rows using multiple conditions

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-4-data-py, warning=FALSE}
DP[(DP['V1'] == 1) & (DP['V4'] == "A")]
```

## R Base code

```{r sec-chap-basic-operations-4-base, warning=FALSE}
DB[DB$V1 == 1 & DB$V4 == "A", ]

subset(DB, V1 == 1 & V4 == "A")
```

## R dplyr code

```{r sec-chap-basic-operations-4-dplyr, warning=FALSE}
filter(DF, V1 == 1, V4 == "A")
```

## R data.table code

```{r sec-chap-basic-operations-4-data.table, warning=FALSE}
DT[V1 == 1 & V4 == "A"]
```
:::
:::

```{r include=FALSE}
DB <- data.frame(
  V1 = rep(c(1L, 2L), 5)[-10],
  V2 = 1:9,
  V3 = rep(c(0.5, 1.0, 1.5), 3),
  V4 = rep(LETTERS[1:3], 3))

DF <- tibble(
  V1 = rep(c(1L, 2L), 5)[-10],
  V2 = 1:9,
  V3 = rep(c(0.5, 1.0, 1.5), 3),
  V4 = rep(LETTERS[1:3], 3))

DT <- data.table(
  V1 = rep(c(1L, 2L), 5)[-10],
  V2 = 1:9,
  V3 = c(0.5, 1.0, 1.5),
  V4 = rep(LETTERS[1:3], 3))
```

::: {.callout-note icon="false" collapse="true"}
## 2.5 Filter unique rows

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-5-data-py, warning=FALSE}
DP.iloc[:,0:3].drop_duplicates()
DP.drop_duplicates(subset=["V1", "V4"])
```

## R Base code

```{r sec-chap-basic-operations-5-base, warning=FALSE}
unique(DB)
DB[!duplicated(DB[ , c("V1", "V4")]), ]
```

## R dplyr code

```{r sec-chap-basic-operations-5-dplyr, warning=FALSE}
distinct(DF, .keep_all = TRUE)

distinct_all(DF)

distinct(DF, across(c(V1, V4))) # returns selected cols

distinct_at(DF, vars(V1, V4))
```

## R data.table code

```{r sec-chap-basic-operations-5-data.table, warning=FALSE}
unique(DT)

unique(DT, by = c("V1", "V4")) # returns all cols
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 2.6 Discard rows with missing values

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-6-data-py, warning=FALSE}
DP.dropna(axis=0)

DP.dropna().reset_index(drop=True) # Keep only the complete rows

DP.dropna(how='all', axis=0)
```

## R Base code

```{r sec-chap-basic-operations-6-base, warning=FALSE}
na.omit(DB)

DB[complete.cases(DB), ] # Keep only the complete rows

DB[rowSums(is.na(DB)) == 0, ]

DB[rowSums(is.na(DB)) != ncol(DB), ]
```

## R dplyr code

```{r sec-chap-basic-operations-6-dplyr, warning=FALSE}
tidyr::drop_na(DF, names(DF))

filter(DF, rowSums(is.na(DF)) != ncol(DF))
```

## R data.table code

```{r sec-chap-basic-operations-6-data.table, warning=FALSE}
na.omit(DT, cols = 1:4)
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 2.7 Other filters

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-7-data-py, warning=FALSE}
DP.sample(n=3)

DP.sample(frac=0.5)

DP.drop_duplicates(subset="V1", keep="first")

DP.nlargest(1, 'V1')
```

## R Base code

```{r sec-chap-basic-operations-7-base, warning=FALSE}
DB[sample(1:nrow(DB), size = 3), ]
```

## R dplyr code

```{r sec-chap-basic-operations-7-dplyr, warning=FALSE}
slice_sample(DF, n = 3)      # n random rows

sample_n(DF, 3)

slice_sample(DF, prop = 0.5) # fraction of rows

sample_frac(DF, 0.5)

DF %>% slice_max(V1, n = 1)

top_n(DF, 1, V1)

```

## R data.table code

```{r sec-chap-basic-operations-7-data.table, warning=FALSE}
DT[sample(.N, 3)] # .N = nb of rows in DT

DT[sample(.N, .N / 2)]

DT[frankv(-V1, ties.method = "dense") < 2]

```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 2.8 More filters

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-8-data-py, warning=FALSE}
DP[DP['V4'].str.contains("^B")]

DP[(DP["V2"] >= 3) & (DP["V2"] <= 5)] # in between rows

DP[(DP['V2'] >= -1) & (DP['V2'] <= 3) & (DP['V2'] >= 1) & (DP['V2'] <= 3)] # in between range

DP[(DP['V2'] >= -1) & (DP['V2'] <= 3)] # simplified version 

```

## R Base code

```{r sec-chap-basic-operations-8-base, warning=FALSE}
DB[grepl("^B", DB$V4), ]

DB[DB$V2 >= 3 & DB$V2 <= 5, ] # in between rows

DB[DB$V2 >= -1:1 & DB$V2 <= 1:3, ] # in between range

```

## R dplyr code

```{r sec-chap-basic-operations-8-dplyr, warning=FALSE}
filter(DF, grepl("^B", V4))

filter(DF, dplyr::between(V2, 3, 5))

filter(DF, V2 > 3 & V2 < 5)

filter(DF, V2 >= -1:1 & V2 <= 1:3)
```

## R data.table code

```{r sec-chap-basic-operations-8-data.table, warning=FALSE}
DT[V4 %like% "^B"]

DT[V2 %between% c(3, 5)]

DT[data.table::between(V2, 3, 5, incbounds = FALSE)]

DT[V2 %inrange% list(-1:1, 1:3)] # see also ?inrange

```
:::
:::

<hr>

# 3. Basic operations - Sort {#sec-chap-basic-operations-sorters}

::: {.callout-note icon="false" collapse="true"}
## 3.1 Sort rows by column

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-sort-1-data-py, warning=FALSE}
DP.sort_values("V3")
```

## R Base code

```{r sec-chap-basic-operations-sort-1-base, warning=FALSE}
DB[order(DB$V3), ]
```

## R dplyr code

```{r sec-chap-basic-operations-sort-1-dplyr, warning=FALSE}
arrange(DF, V3)
```

## R data.table code

```{r sec-chap-basic-operations-sort-1-data.table, warning=FALSE}
DT[order(V3)]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 3.2 Sort rows in decreasing order

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-sort-2-data-py, warning=FALSE}
DP.sort_values(by='V3', ascending=False)
```

## R Base code

```{r sec-chap-basic-operations-sort-2-base, warning=FALSE}
DB[order(-DB$V3), ]
```

## R dplyr code

```{r sec-chap-basic-operations-sort-2-dplyr, warning=FALSE}
arrange(DF, desc(V3))
```

## R data.table code

```{r sec-chap-basic-operations-sort-2-data.table, warning=FALSE}
DT[order(-V3)]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 3.3 Sort rows based on several columns

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-sort-3-data-py, warning=FALSE}
DP.sort_values(by=['V1', 'V2'], ascending=[True, False])
```

## R Base code

```{r sec-chap-basic-operations-sort-3-base, warning=FALSE}
DB[order(DB$V1, -DB$V2), ]
```

## R dplyr code

```{r sec-chap-basic-operations-sort-3-dplyr, warning=FALSE}
arrange(DF, V1, desc(V2))
```

## R data.table code

```{r sec-chap-basic-operations-sort-3-data.table, warning=FALSE}
DT[order(V1, -V2)]
```
:::
:::

<hr>

# 4. Basic operations - Select {#sec-chap-basic-operations-selectors}

::: {.callout-note icon="false" collapse="true"}
## 4.1 Select one column using an index (not recommended)

::: panel-tabset
## Python code

```{python sec-basic-operations-select-1-data-py, warning=FALSE}
DP[['V3']]
```

## R Base code

```{r sec-basic-operations-select-1-base, warning=FALSE}
DB[, c(3)] # returns a vector
```

## R dplyr code

```{r sec-basic-operations-select-1-dplyr, warning=FALSE}
DF[[3]] # returns a vector

DF[3]   # returns a tibble
```

## R data.table code

```{r sec-basic-operations-select-1-data.table, warning=FALSE}
DT[[3]] # returns a vector

DT[, 3]  # returns a data.table
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 4.2 Select one column using column name

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-select-2-data-py, warning=FALSE}
DP.loc[:, "V2"]

DP.loc[:, ["V2"]]
```

## R Base code

```{r sec-chap-basic-operations-select-2-base, warning=FALSE}
DB[, "V2"]

DB[, (colnames(DB) %in% c("V2"))]
```

## R dplyr code

```{r sec-chap-basic-operations-select-2-dplyr, warning=FALSE}
select(DF, V2) # returns a tibble

pull(DF, V2, name = V4)   # returns a (named) vector

DF[, "V2"]        # returns a tibble

DF[["V2"]]        # returns a vector
```

## R data.table code

```{r sec-chap-basic-operations-select-2-data.table, warning=FALSE}
DT[, list(V2)] # returns a data.table

DT[, .(V2)]    # returns a data.table

# . is an alias for list

DT[, "V2"]     # returns a data.table

DT[, V2]       # returns a vector

DT[["V2"]]     # returns a vector
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 4.3 Select several columns

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-select-3-data-py, warning=FALSE}
DP[['V2', 'V3', 'V4']]

DP.loc[:, 'V2':'V4']
```

## R Base code

```{r sec-chap-basic-operations-select-3-base, warning=FALSE}
DB[, c(2,3,4)]

DB[, c(2:4)]
```

## R dplyr code

```{r sec-chap-basic-operations-select-3-dplyr, warning=FALSE}
select(DF, V2, V3, V4)

select(DF, V2:V4) # select columns between V2 and V4
```

## R data.table code

```{r sec-chap-basic-operations-select-3-data.table, warning=FALSE}
DT[, .(V2, V3, V4)]

DT[, list(V2, V3, V4)]

DT[, V2:V4] # select columns between V2 and V4
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 4.4 Exclude columns

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-select-4-data-py, warning=FALSE}
DP.drop(columns=['V2', 'V3'])

```

## R Base code

```{r sec-chap-basic-operations-select-4-base, warning=FALSE}
DB[, -c(2,3)]

```

## R dplyr code

```{r sec-chap-basic-operations-select-4-dplyr, warning=FALSE}
select(DF, -V2, -V3)

```

## R data.table code

```{r sec-chap-basic-operations-select-4-data.table, warning=FALSE}

DT[, !c("V2", "V3")]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 4.5 Select/Exclude columns using a character vector

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-select-5-data-py, warning=FALSE}
cols = ["V2", "V3"]
DP.drop(DP.columns[[0, 3]], axis=1)[cols]

```

## R Base code

```{r sec-chap-basic-operations-select-5-base, warning=FALSE}
cols <- c("V2", "V3")

DB[ , colnames(DB)[-c(1,4)]]

DB[ names(DB)[!names(DB) %in% cols] ]

DB[ setdiff(names(DB), cols)]

```

## R dplyr code

```{r sec-chap-basic-operations-select-5-dplyr, warning=FALSE}
cols <- c("V2", "V3")

select(DF, !!cols) # unquoting

select(DF, -!!cols)


```

## R data.table code

```{r sec-chap-basic-operations-select-5-data.table, warning=FALSE}
cols <- c("V2", "V3")

DT[, ..cols] # .. prefix means 'one-level up'

DT[, !..cols] # or DT[, -..cols]

```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 4.6 Other selections

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-select-6-data-py, warning=FALSE}
DP.iloc[:, [1, 0, 2]]

DP[['V2', 'V1', 'V3']]

DP.filter(regex=r'^V[1-2]$')

# select(DF, num_range("V", 1:2))
DP.filter(regex=r'^V[1-2]$')

# select(DF, V4, everything()) - reorder columns
DP[['V4'] + list(DP.columns[~DP.columns.isin(['V4'])])]

# select(DF, contains("V"))
DP.filter(like='V')

# select(DF, ends_with("3"))
DP.filter(like='3')

# select(DF, matches(".2"))
DP.filter(regex=r'.2$')
```

## R Base code

```{r sec-chap-basic-operations-select-6-base, warning=FALSE}
DB[ , c(2, 1, 3)] # Reorder columns by index

DB[ , c("V2", "V1", "V3")] # Reorder columns by names

subset(DB, select = c(2, 1, 3)) # Reorder columns with subset()

DB[ , order(colnames(DB), decreasing=FALSE)]

```

## R dplyr code

```{r sec-chap-basic-operations-select-6-dplyr, warning=FALSE}
select(DF, num_range("V", 1:2))

select(DF, V4, everything()) # reorder columns

select(DF, contains("V"))

select(DF, ends_with("3"))

select(DF, matches(".2"))

select(DF, one_of(c("V1", "X")))

select(DF, -starts_with("V2")) # remove variables using "-" prior to function

```

## R data.table code

```{r sec-chap-basic-operations-select-6-data.table, warning=FALSE}
cols <- paste0("V", 1:2)

cols <- union("V4", names(DT))

cols <- grep("V",   names(DT))

cols <- grep("3$",  names(DT))

cols <- grep(".2",  names(DT))

cols <- grep("^V1|X$",  names(DT))

cols <- grep("^(?!V2)", names(DT), perl = TRUE)

DT[, ..cols]

```
:::
:::

# 5. Basic operations - Summarise {#sec-chap-basic-operations-summarizations}

::: {.callout-note icon="false" collapse="true"}
## 5.1 Summarise one column

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-summarise-1-data-py, warning=FALSE}
# summarise(DF, sum(V1))
DP['V1'].sum()

# summarise(DF, sumV1 = sum(V1))
result = DP['V1'].sum()
pd.DataFrame({'sumV1': [result]})
```

## R Base code

```{r sec-chap-basic-operations-summarise-1-base, warning=FALSE}
sum(DB$V1)

data.frame(sumV1 = sum(DB$V1))
```

## R dplyr code

```{r sec-chap-basic-operations-summarise-1-dplyr, warning=FALSE}
summarise(DF, sum(V1)) # returns a tibble
summarise(DF, sumV1 = sum(V1)) # returns a tibble

```

## R data.table code

```{r sec-chap-basic-operations-summarise-1-data.table, warning=FALSE}
DT[, sum(V1)]    # returns a vector
DT[, .(sum(V1))] # returns a data.table
DT[, .(sumV1 = sum(V1))] # returns a data.table

```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 5.2 Summarise several column

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-summarise-2-data-py, warning=FALSE}
pd.DataFrame({'sumV1': [DP['V1'].sum()], 'sdV3': [np.std(DP['V3'])]})
```

## R Base code

```{r sec-chap-basic-operations-summarise-2-base, warning=FALSE}
data.frame(sumV1 = sum(DB$V1), sdV3 = sd(DB$V3))
```

## R dplyr code

```{r sec-chap-basic-operations-summarise-2-dplyr, warning=FALSE}
summarise(DF, sum(V1), sd(V3))
```

## R data.table code

```{r sec-chap-basic-operations-summarise-2-data.table, warning=FALSE}
summarise(DF, sum(V1), sd(V3))
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 5.3 Summarise several columns and assign column names

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-summarise-3-data-py, warning=FALSE}
DP.agg(sumv1=('V1', 'sum'), sdv3=('V3', 'std'))
```

## R Base code

```{r sec-chap-basic-operations-summarise-3-base, warning=FALSE}
data.frame(sumv1 = sum(DB$V1), sdv3 = sd(DB$V3))
```

## R dplyr code

```{r sec-chap-basic-operations-summarise-3-dplyr, warning=FALSE}
DF %>%
  summarise(sumv1 = sum(V1),
            sdv3  = sd(V3))
```

## R data.table code

```{r sec-chap-basic-operations-summarise-3-data.table, warning=FALSE}
DF %>%
  summarise(sumv1 = sum(V1),
            sdv3  = sd(V3))
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 5.4 Summarise a subset of rows

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-summarise-4-data-py, warning=FALSE}
DP.loc[0:3, 'V1'].sum()
```

## R Base code

```{r sec-chap-basic-operations-summarise-4-base, warning=FALSE}
sum(DB[1:4, "V1"])
```

## R dplyr code

```{r sec-chap-basic-operations-summarise-4-dplyr, warning=FALSE}
DF %>%
  slice(1:4) %>%
  summarise(sum(V1))
```

## R data.table code

```{r sec-chap-basic-operations-summarise-4-data.table, warning=FALSE}
DT[1:4, sum(V1)]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 5.5 Other

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-summarise-5-data-py, warning=FALSE}
DP['V3'].head(1)
DP['V3'].tail(1)
DP['V3'].iloc[4]
DP['V4'].nunique()
DP.nunique()
```

## R Base code

```{r sec-chap-basic-operations-summarise-5-base, warning=FALSE}
DB[1, "V3"]
DB[nrow(DB), "V3"]
DB[5, "V3"]
length(unique(DB$V4))
length(unique(unlist(DB)))
```

## R dplyr code

```{r sec-chap-basic-operations-summarise-5-dplyr, warning=FALSE}
summarise(DF, dplyr::first(V3))
summarise(DF, dplyr::last(V3))
summarise(DF, nth(V3, 5))
summarise(DF, n_distinct(V4))
n_distinct(DF)

```

## R data.table code

```{r sec-chap-basic-operations-summarise-5-data.table, warning=FALSE}
DT[, data.table::first(V3)]
DT[, data.table::last(V3)]
DT[5, V3]
DT[, uniqueN(V4)]
uniqueN(DT)

```
:::
:::

# 6. Basic operations - Add/update/delete columns {#sec-chap-basic-operations-columns}

::: {.callout-note icon="false" collapse="true"}
## 6.1 Modify a column

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-1-data-py, warning=FALSE}
DP['V1'] = DP['V1']**2
```

## R Base code

```{r sec-chap-basic-operations-other-1-base, warning=FALSE}
DB$V1 <- DB$V1^2
DB
```

## R dplyr code

```{r sec-chap-basic-operations-other-1-dplyr, warning=FALSE}
DF %>% mutate(V1 = V1^2)
```

## R data.table code

```{r sec-chap-basic-operations-other-1-data.table, warning=FALSE}
DT[, V1 := V1^2]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.2 Add one column

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-2-data-py, warning=FALSE}
DP['v5'] = np.log(DP['V1'])
```

## R Base code

```{r sec-chap-basic-operations-other-2-base, warning=FALSE}
DB$v5 <- log(DB$V1)
DB
```

## R dplyr code

```{r sec-chap-basic-operations-other-2-dplyr, warning=FALSE}
DF <- mutate(DF, v5 = log(V1))
DF
```

## R data.table code

```{r sec-chap-basic-operations-other-2-data.table, warning=FALSE}
DT[, v5 := log(V1)][] 
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.3 Add several columns

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-3-data-py, warning=FALSE}
DP = DP.assign(v6=np.sqrt(DP['V1']), v7='X')
DP
```

## R Base code

```{r sec-chap-basic-operations-other-3-base, warning=FALSE}
DB <- transform(DB, v6 = sqrt(V1), v7 = "X")
DB
```

## R dplyr code

```{r sec-chap-basic-operations-other-3-dplyr, warning=FALSE}
DF <- mutate(DF, v6 = sqrt(V1), v7 = "X")
DF
```

## R data.table code

```{r sec-chap-basic-operations-other-3-data.table, warning=FALSE}
DT[, c("v6", "v7") := .(sqrt(V1), "X")]

DT[, ':='(v6 = sqrt(V1),
          v7 = "X")]     # same, functional form
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.4 Create one column and remove the others

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-4-data-py, warning=FALSE}
DP.assign(v8=DP['V3'] + 1)[['v8']]
```

## R Base code

```{r sec-chap-basic-operations-other-4-base, warning=FALSE}
within(DB, v8 <- V3 + 1)[, "v8", drop = FALSE]
```

## R dplyr code

```{r sec-chap-basic-operations-other-4-dplyr, warning=FALSE}
transmute(DF, v8 = V3 + 1)
```

## R data.table code

```{r sec-chap-basic-operations-other-4-data.table, warning=FALSE}
DT[, .(v8 = V3 + 1)]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.5 Remove one column

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-5-data-py, warning=FALSE}
DP.drop(columns='v5')
```

## R Base code

```{r sec-chap-basic-operations-other-5-base, warning=FALSE}
subset(DB, select = -v5)
```

## R dplyr code

```{r sec-chap-basic-operations-other-5-dplyr, warning=FALSE}
select(DF, -v5)
```

## R data.table code

```{r sec-chap-basic-operations-other-5-data.table, warning=FALSE}
DT[, v5 := NULL]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.6 Remove several columns

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-6-data-py, warning=FALSE}
DP.drop(columns=['v6', 'v7'])
```

## R Base code

```{r sec-chap-basic-operations-other-6-base, warning=FALSE}
subset(DB, select = -c(v6, v7))
```

## R dplyr code

```{r sec-chap-basic-operations-other-6-dplyr, warning=FALSE}
select(DF, -v6, -v7)
```

## R data.table code

```{r sec-chap-basic-operations-other-6-data.table, warning=FALSE}
DT[, c("v6", "v7") := NULL]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.7 Remove columns using a vector of colnames

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-7-data-py, warning=FALSE}
cols = "V3"
DP.drop(columns=cols)
```

## R Base code

```{r sec-chap-basic-operations-other-7-base, warning=FALSE}
cols <- c("V3")
DB[, !(names(DB) %in% cols)]
```

## R dplyr code

```{r sec-chap-basic-operations-other-7-dplyr, warning=FALSE}
cols <- c("V3")
DF <- select(DF, -one_of(cols))
DF
```

## R data.table code

```{r sec-chap-basic-operations-other-7-data.table, warning=FALSE}
cols <- c("V3")
DT[, (cols) := NULL] # ! not DT[, cols := NULL]
```
:::
:::

::: {.callout-note icon="false" collapse="true"}
## 6.8 Remove columns using a vector of colnames

::: panel-tabset
## Python code

```{python sec-chap-basic-operations-other-8-data-py, warning=FALSE}
DP['V2'].where(DP['V2'] >= 4, 0)
```

## R Base code

```{r sec-chap-basic-operations-other-8-base, warning=FALSE}
base::replace(DB$V2, DB$V2 < 4, 0L)
```

## R dplyr code

```{r sec-chap-basic-operations-other-8-dplyr, warning=FALSE}
mutate(DF, V2 = base::replace(V2, V2 < 4, 0L))
```

## R data.table code

```{r sec-chap-basic-operations-other-8-data.table, warning=FALSE}
DT[V2 < 4, V2 := 0L]
DT
```
:::
:::
